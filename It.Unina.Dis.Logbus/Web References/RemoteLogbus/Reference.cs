//------------------------------------------------------------------------------
// <auto-generated>
//     Il codice è stato generato da uno strumento.
//     Versione runtime:2.0.50727.4927
//
//     Le modifiche apportate a questo file possono provocare un comportamento non corretto e andranno perse se
//     il codice viene rigenerato.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// Il codice sorgente è stato generato automaticamente da Microsoft.VSDesigner, versione 2.0.50727.4927.
// 
using System;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Diagnostics;
using System.Threading;
using System.Web.Services;
using System.Web.Services.Description;
using System.Web.Services.Protocols;
using System.Xml.Schema;
using System.Xml.Serialization;
using It.Unina.Dis.Logbus.Filters;

#pragma warning disable 1591

namespace It.Unina.Dis.Logbus.RemoteLogbus
{
    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
#if !MONO
    [WebServiceBinding(Name = "ChannelManagement", Namespace = "http://www.dis.unina.it/logbus-ng/wsdl")]
#endif
    public class ChannelManagement : SoapHttpClientProtocol, IChannelManagement
    {
        private SendOrPostCallback ListChannelsOperationCompleted;

        private SendOrPostCallback CreateChannelOperationCompleted;

        private SendOrPostCallback GetChannelInformationOperationCompleted;

        private SendOrPostCallback DeleteChannelOperationCompleted;

        private bool useDefaultCredentialsSetExplicitly;

        /// <remarks/>
        public ChannelManagement()
        {
            if (IsLocalFileSystemWebService(Url))
            {
                UseDefaultCredentials = true;
                useDefaultCredentialsSetExplicitly = false;
            }
            else
            {
                useDefaultCredentialsSetExplicitly = true;
            }
        }

        public new string Url
        {
            get { return base.Url; }
            set
            {
                if (((IsLocalFileSystemWebService(base.Url)
                      && (useDefaultCredentialsSetExplicitly == false))
                     && (IsLocalFileSystemWebService(value) == false)))
                {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }

        public new bool UseDefaultCredentials
        {
            get { return base.UseDefaultCredentials; }
            set
            {
                base.UseDefaultCredentials = value;
                useDefaultCredentialsSetExplicitly = true;
            }
        }

        /// <remarks/>
        public event ListChannelsCompletedEventHandler ListChannelsCompleted;

        /// <remarks/>
        public event CreateChannelCompletedEventHandler CreateChannelCompleted;

        /// <remarks/>
        public event GetChannelInformationCompletedEventHandler GetChannelInformationCompleted;

        /// <remarks/>
        public event DeleteChannelCompletedEventHandler DeleteChannelCompleted;

        /// <remarks/>
        [SoapDocumentMethod("urn:#ListChannels", Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Bare)
        ]
        [return: XmlArray("string-array", Namespace = "http://www.dis.unina.it/logbus-ng/wsdl")]
        public string[] ListChannels()
        {
            object[] results = Invoke("ListChannels", new object[0]);
            return ((string[]) (results[0]));
        }

        /// <remarks/>
        public void ListChannelsAsync()
        {
            ListChannelsAsync(null);
        }

        /// <remarks/>
        public void ListChannelsAsync(object userState)
        {
            if ((ListChannelsOperationCompleted == null))
            {
                ListChannelsOperationCompleted = new SendOrPostCallback(OnListChannelsOperationCompleted);
            }
            InvokeAsync("ListChannels", new object[0], ListChannelsOperationCompleted, userState);
        }

        private void OnListChannelsOperationCompleted(object arg)
        {
            if ((ListChannelsCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs) (arg));
                ListChannelsCompleted(this,
                                      new ListChannelsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error,
                                                                         invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("urn:#CreateChannel", Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Bare
            )]
        public void CreateChannel(
            [XmlElement("channel-creation", Namespace = "http://www.dis.unina.it/logbus-ng/wsdl")] ChannelCreationInformation channelcreation)
        {
            Invoke("CreateChannel", new object[]
                                        {
                                            channelcreation
                                        });
        }

        /// <remarks/>
        public void CreateChannelAsync(ChannelCreationInformation channelcreation)
        {
            CreateChannelAsync(channelcreation, null);
        }

        /// <remarks/>
        public void CreateChannelAsync(ChannelCreationInformation channelcreation, object userState)
        {
            if ((CreateChannelOperationCompleted == null))
            {
                CreateChannelOperationCompleted = new SendOrPostCallback(OnCreateChannelOperationCompleted);
            }
            InvokeAsync("CreateChannel", new object[]
                                             {
                                                 channelcreation
                                             }, CreateChannelOperationCompleted, userState);
        }

        private void OnCreateChannelOperationCompleted(object arg)
        {
            if ((CreateChannelCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs) (arg));
                CreateChannelCompleted(this,
                                       new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled,
                                                                   invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("urn:#GetChannelInformation", Use = SoapBindingUse.Literal,
            ParameterStyle = SoapParameterStyle.Bare)]
        [return: XmlElement("channel-info", Namespace = "http://www.dis.unina.it/logbus-ng/wsdl")]
        public ChannelInformation GetChannelInformation(
            [XmlElement("channel-id", Namespace = "http://www.dis.unina.it/logbus-ng/wsdl")] string channelid)
        {
            object[] results = Invoke("GetChannelInformation", new object[]
                                                                   {
                                                                       channelid
                                                                   });
            return ((ChannelInformation) (results[0]));
        }

        /// <remarks/>
        public void GetChannelInformationAsync(string channelid)
        {
            GetChannelInformationAsync(channelid, null);
        }

        /// <remarks/>
        public void GetChannelInformationAsync(string channelid, object userState)
        {
            if ((GetChannelInformationOperationCompleted == null))
            {
                GetChannelInformationOperationCompleted =
                    new SendOrPostCallback(OnGetChannelInformationOperationCompleted);
            }
            InvokeAsync("GetChannelInformation", new object[]
                                                     {
                                                         channelid
                                                     }, GetChannelInformationOperationCompleted, userState);
        }

        private void OnGetChannelInformationOperationCompleted(object arg)
        {
            if ((GetChannelInformationCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs) (arg));
                GetChannelInformationCompleted(this,
                                               new GetChannelInformationCompletedEventArgs(invokeArgs.Results,
                                                                                           invokeArgs.Error,
                                                                                           invokeArgs.Cancelled,
                                                                                           invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("urn:#DeleteChannel", Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Bare
            )]
        public void DeleteChannel(
            [XmlElement("channel-id", Namespace = "http://www.dis.unina.it/logbus-ng/wsdl")] string channelid)
        {
            Invoke("DeleteChannel", new object[]
                                        {
                                            channelid
                                        });
        }

        /// <remarks/>
        public void DeleteChannelAsync(string channelid)
        {
            DeleteChannelAsync(channelid, null);
        }

        /// <remarks/>
        public void DeleteChannelAsync(string channelid, object userState)
        {
            if ((DeleteChannelOperationCompleted == null))
            {
                DeleteChannelOperationCompleted = new SendOrPostCallback(OnDeleteChannelOperationCompleted);
            }
            InvokeAsync("DeleteChannel", new object[]
                                             {
                                                 channelid
                                             }, DeleteChannelOperationCompleted, userState);
        }

        private void OnDeleteChannelOperationCompleted(object arg)
        {
            if ((DeleteChannelCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs) (arg));
                DeleteChannelCompleted(this,
                                       new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled,
                                                                   invokeArgs.UserState));
            }
        }

        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }

        private bool IsLocalFileSystemWebService(string url)
        {
            if (((url == null)
                 || (url == string.Empty)))
            {
                return false;
            }
            Uri wsUri = new Uri(url);
            if (((wsUri.Port >= 1024)
                 && (string.Compare(wsUri.Host, "localHost", StringComparison.OrdinalIgnoreCase) == 0)))
            {
                return true;
            }
            return false;
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
#if !MONO
    [WebServiceBinding(Name = "ChannelSubscription", Namespace = "http://www.dis.unina.it/logbus-ng/wsdl")]
#endif
    public class ChannelSubscription : SoapHttpClientProtocol, IChannelSubscription
    {
        private SendOrPostCallback ListChannelsOperationCompleted;

        private SendOrPostCallback GetAvailableTransportsOperationCompleted;

        private SendOrPostCallback SubscribeChannelOperationCompleted;

        private SendOrPostCallback UnsubscribeChannelOperationCompleted;

        private SendOrPostCallback RefreshSubscriptionOperationCompleted;

        private SendOrPostCallback GetAvailableFiltersOperationCompleted;

        private SendOrPostCallback DescribeFilterOperationCompleted;

        private bool useDefaultCredentialsSetExplicitly;

        /// <remarks/>
        public ChannelSubscription()
        {
            if (IsLocalFileSystemWebService(Url))
            {
                UseDefaultCredentials = true;
                useDefaultCredentialsSetExplicitly = false;
            }
            else
            {
                useDefaultCredentialsSetExplicitly = true;
            }
        }

        public new string Url
        {
            get { return base.Url; }
            set
            {
                if (((IsLocalFileSystemWebService(base.Url)
                      && (useDefaultCredentialsSetExplicitly == false))
                     && (IsLocalFileSystemWebService(value) == false)))
                {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }

        public new bool UseDefaultCredentials
        {
            get { return base.UseDefaultCredentials; }
            set
            {
                base.UseDefaultCredentials = value;
                useDefaultCredentialsSetExplicitly = true;
            }
        }

        /// <remarks/>
        public event ListChannelsCompletedEventHandler ListChannelsCompleted;

        /// <remarks/>
        public event GetAvailableTransportsCompletedEventHandler GetAvailableTransportsCompleted;

        /// <remarks/>
        public event SubscribeChannelCompletedEventHandler SubscribeChannelCompleted;

        /// <remarks/>
        public event UnsubscribeChannelCompletedEventHandler UnsubscribeChannelCompleted;

        /// <remarks/>
        public event RefreshSubscriptionCompletedEventHandler RefreshSubscriptionCompleted;

        /// <remarks/>
        public event GetAvailableFiltersCompletedEventHandler GetAvailableFiltersCompleted;

        /// <remarks/>
        public event DescribeFilterCompletedEventHandler DescribeFilterCompleted;

        /// <remarks/>
        [SoapDocumentMethod("urn:#ListChannels", Use = SoapBindingUse.Literal, ParameterStyle = SoapParameterStyle.Bare)
        ]
        [return: XmlArray("string-array", Namespace = "http://www.dis.unina.it/logbus-ng/wsdl")]
        public string[] ListChannels()
        {
            object[] results = Invoke("ListChannels", new object[0]);
            return ((string[]) (results[0]));
        }

        /// <remarks/>
        public void ListChannelsAsync()
        {
            ListChannelsAsync(null);
        }

        /// <remarks/>
        public void ListChannelsAsync(object userState)
        {
            if ((ListChannelsOperationCompleted == null))
            {
                ListChannelsOperationCompleted = new SendOrPostCallback(OnListChannelsOperationCompleted);
            }
            InvokeAsync("ListChannels", new object[0], ListChannelsOperationCompleted, userState);
        }

        private void OnListChannelsOperationCompleted(object arg)
        {
            if ((ListChannelsCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs) (arg));
                ListChannelsCompleted(this,
                                      new ListChannelsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error,
                                                                         invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("urn:#GetAvailableTransports", Use = SoapBindingUse.Literal,
            ParameterStyle = SoapParameterStyle.Bare)]
        [return: XmlArray("string-array", Namespace = "http://www.dis.unina.it/logbus-ng/wsdl")]
        public string[] GetAvailableTransports()
        {
            object[] results = Invoke("GetAvailableTransports", new object[0]);
            return ((string[]) (results[0]));
        }

        /// <remarks/>
        public void GetAvailableTransportsAsync()
        {
            GetAvailableTransportsAsync(null);
        }

        /// <remarks/>
        public void GetAvailableTransportsAsync(object userState)
        {
            if ((GetAvailableTransportsOperationCompleted == null))
            {
                GetAvailableTransportsOperationCompleted =
                    new SendOrPostCallback(OnGetAvailableTransportsOperationCompleted);
            }
            InvokeAsync("GetAvailableTransports", new object[0], GetAvailableTransportsOperationCompleted, userState);
        }

        private void OnGetAvailableTransportsOperationCompleted(object arg)
        {
            if ((GetAvailableTransportsCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs) (arg));
                GetAvailableTransportsCompleted(this,
                                                new GetAvailableTransportsCompletedEventArgs(invokeArgs.Results,
                                                                                             invokeArgs.Error,
                                                                                             invokeArgs.Cancelled,
                                                                                             invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("urn:#SubscribeChannel", Use = SoapBindingUse.Literal,
            ParameterStyle = SoapParameterStyle.Bare)]
        [return: XmlElement("channel-sub-response", Namespace = "http://www.dis.unina.it/logbus-ng/wsdl")]
        public ChannelSubscriptionResponse SubscribeChannel(
            [XmlElement("channel-sub-request", Namespace = "http://www.dis.unina.it/logbus-ng/wsdl")] ChannelSubscriptionRequest channelsubrequest)
        {
            object[] results = Invoke("SubscribeChannel", new object[]
                                                              {
                                                                  channelsubrequest
                                                              });
            return ((ChannelSubscriptionResponse) (results[0]));
        }

        /// <remarks/>
        public void SubscribeChannelAsync(ChannelSubscriptionRequest channelsubrequest)
        {
            SubscribeChannelAsync(channelsubrequest, null);
        }

        /// <remarks/>
        public void SubscribeChannelAsync(ChannelSubscriptionRequest channelsubrequest, object userState)
        {
            if ((SubscribeChannelOperationCompleted == null))
            {
                SubscribeChannelOperationCompleted = new SendOrPostCallback(OnSubscribeChannelOperationCompleted);
            }
            InvokeAsync("SubscribeChannel", new object[]
                                                {
                                                    channelsubrequest
                                                }, SubscribeChannelOperationCompleted, userState);
        }

        private void OnSubscribeChannelOperationCompleted(object arg)
        {
            if ((SubscribeChannelCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs) (arg));
                SubscribeChannelCompleted(this,
                                          new SubscribeChannelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error,
                                                                                 invokeArgs.Cancelled,
                                                                                 invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("urn:#UnsubscribeChannel", Use = SoapBindingUse.Literal,
            ParameterStyle = SoapParameterStyle.Bare)]
        public void UnsubscribeChannel(
            [XmlElement("client-id", Namespace = "http://www.dis.unina.it/logbus-ng/wsdl")] string clientid)
        {
            Invoke("UnsubscribeChannel", new object[]
                                             {
                                                 clientid
                                             });
        }

        /// <remarks/>
        public void UnsubscribeChannelAsync(string clientid)
        {
            UnsubscribeChannelAsync(clientid, null);
        }

        /// <remarks/>
        public void UnsubscribeChannelAsync(string clientid, object userState)
        {
            if ((UnsubscribeChannelOperationCompleted == null))
            {
                UnsubscribeChannelOperationCompleted = new SendOrPostCallback(OnUnsubscribeChannelOperationCompleted);
            }
            InvokeAsync("UnsubscribeChannel", new object[]
                                                  {
                                                      clientid
                                                  }, UnsubscribeChannelOperationCompleted, userState);
        }

        private void OnUnsubscribeChannelOperationCompleted(object arg)
        {
            if ((UnsubscribeChannelCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs) (arg));
                UnsubscribeChannelCompleted(this,
                                            new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled,
                                                                        invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("urn:#RefreshSubscription", Use = SoapBindingUse.Literal,
            ParameterStyle = SoapParameterStyle.Bare)]
        public void RefreshSubscription(
            [XmlElement("client-id", Namespace = "http://www.dis.unina.it/logbus-ng/wsdl")] string clientid)
        {
            Invoke("RefreshSubscription", new object[]
                                              {
                                                  clientid
                                              });
        }

        /// <remarks/>
        public void RefreshSubscriptionAsync(string clientid)
        {
            RefreshSubscriptionAsync(clientid, null);
        }

        /// <remarks/>
        public void RefreshSubscriptionAsync(string clientid, object userState)
        {
            if ((RefreshSubscriptionOperationCompleted == null))
            {
                RefreshSubscriptionOperationCompleted = new SendOrPostCallback(OnRefreshSubscriptionOperationCompleted);
            }
            InvokeAsync("RefreshSubscription", new object[]
                                                   {
                                                       clientid
                                                   }, RefreshSubscriptionOperationCompleted, userState);
        }

        private void OnRefreshSubscriptionOperationCompleted(object arg)
        {
            if ((RefreshSubscriptionCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs) (arg));
                RefreshSubscriptionCompleted(this,
                                             new AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled,
                                                                         invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("urn:#GetAvailableFilters", Use = SoapBindingUse.Literal,
            ParameterStyle = SoapParameterStyle.Bare)]
        [return: XmlArray("string-array", Namespace = "http://www.dis.unina.it/logbus-ng/wsdl")]
        public string[] GetAvailableFilters()
        {
            object[] results = Invoke("GetAvailableFilters", new object[0]);
            return ((string[]) (results[0]));
        }

        /// <remarks/>
        public void GetAvailableFiltersAsync()
        {
            GetAvailableFiltersAsync(null);
        }

        /// <remarks/>
        public void GetAvailableFiltersAsync(object userState)
        {
            if ((GetAvailableFiltersOperationCompleted == null))
            {
                GetAvailableFiltersOperationCompleted = new SendOrPostCallback(OnGetAvailableFiltersOperationCompleted);
            }
            InvokeAsync("GetAvailableFilters", new object[0], GetAvailableFiltersOperationCompleted, userState);
        }

        private void OnGetAvailableFiltersOperationCompleted(object arg)
        {
            if ((GetAvailableFiltersCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs) (arg));
                GetAvailableFiltersCompleted(this,
                                             new GetAvailableFiltersCompletedEventArgs(invokeArgs.Results,
                                                                                       invokeArgs.Error,
                                                                                       invokeArgs.Cancelled,
                                                                                       invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("urn:#DescribeFilter", Use = SoapBindingUse.Literal,
            ParameterStyle = SoapParameterStyle.Bare)]
        [return: XmlElement("filter-description", Namespace = "http://www.dis.unina.it/logbus-ng/wsdl")]
        public FilterDescription DescribeFilter(
            [XmlElement("filter-id", Namespace = "http://www.dis.unina.it/logbus-ng/wsdl")] string filterid)
        {
            object[] results = Invoke("DescribeFilter", new object[]
                                                            {
                                                                filterid
                                                            });
            return ((FilterDescription) (results[0]));
        }

        /// <remarks/>
        public void DescribeFilterAsync(string filterid)
        {
            DescribeFilterAsync(filterid, null);
        }

        /// <remarks/>
        public void DescribeFilterAsync(string filterid, object userState)
        {
            if ((DescribeFilterOperationCompleted == null))
            {
                DescribeFilterOperationCompleted = new SendOrPostCallback(OnDescribeFilterOperationCompleted);
            }
            InvokeAsync("DescribeFilter", new object[]
                                              {
                                                  filterid
                                              }, DescribeFilterOperationCompleted, userState);
        }

        private void OnDescribeFilterOperationCompleted(object arg)
        {
            if ((DescribeFilterCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs) (arg));
                DescribeFilterCompleted(this,
                                        new DescribeFilterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error,
                                                                             invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }

        private bool IsLocalFileSystemWebService(string url)
        {
            if (((url == null)
                 || (url == string.Empty)))
            {
                return false;
            }
            Uri wsUri = new Uri(url);
            if (((wsUri.Port >= 1024)
                 && (string.Compare(wsUri.Host, "localHost", StringComparison.OrdinalIgnoreCase) == 0)))
            {
                return true;
            }
            return false;
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.4927")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(Namespace = "http://www.dis.unina.it/logbus-ng/wsdl")]
    public class ChannelCreationInformation
    {
        private string idField;

        private string titleField;

        private string descriptionField;

        private long coalescenceWindowField;

        private FilterBase filterField;

        /// <remarks/>
        public string id
        {
            get { return idField; }
            set { idField = value; }
        }

        /// <remarks/>
        public string title
        {
            get { return titleField; }
            set { titleField = value; }
        }

        /// <remarks/>
        [XmlElement(IsNullable = true)]
        public string description
        {
            get { return descriptionField; }
            set { descriptionField = value; }
        }

        /// <remarks/>
        public long coalescenceWindow
        {
            get { return coalescenceWindowField; }
            set { coalescenceWindowField = value; }
        }

        /// <remarks/>
        [XmlElement(Namespace = "http://www.dis.unina.it/logbus-ng/filters")]
        public FilterBase filter
        {
            get { return filterField; }
            set { filterField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.4927")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(Namespace = "http://www.dis.unina.it/logbus-ng/wsdl")]
    public class FilterDescription
    {
        private string descriptionField;

        private string idField;

        /// <remarks/>
        public string description
        {
            get { return descriptionField; }
            set { descriptionField = value; }
        }

        /// <remarks/>
        [XmlAttribute]
        public string id
        {
            get { return idField; }
            set { idField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.4927")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(Namespace = "http://www.dis.unina.it/logbus-ng/wsdl")]
    public class ChannelSubscriptionResponse
    {
        private KeyValuePair[] paramField;

        private string clientidField;

        /// <remarks/>
        [XmlElement("param")]
        public KeyValuePair[] param
        {
            get { return paramField; }
            set { paramField = value; }
        }

        /// <remarks/>
        [XmlAttribute("client-id")]
        public string clientid
        {
            get { return clientidField; }
            set { clientidField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.4927")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(Namespace = "http://www.dis.unina.it/logbus-ng/wsdl")]
    public class KeyValuePair
    {
        private string nameField;

        private string valueField;

        /// <remarks/>
        [XmlAttribute]
        public string name
        {
            get { return nameField; }
            set { nameField = value; }
        }

        /// <remarks/>
        [XmlAttribute]
        public string value
        {
            get { return valueField; }
            set { valueField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.4927")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(Namespace = "http://www.dis.unina.it/logbus-ng/wsdl")]
    public class ChannelSubscriptionRequest
    {
        private KeyValuePair[] paramField;

        private string channelidField;

        private string transportField;

        /// <remarks/>
        [XmlElement("param")]
        public KeyValuePair[] param
        {
            get { return paramField; }
            set { paramField = value; }
        }

        /// <remarks/>
        [XmlAttribute("channel-id")]
        public string channelid
        {
            get { return channelidField; }
            set { channelidField = value; }
        }

        /// <remarks/>
        [XmlAttribute]
        public string transport
        {
            get { return transportField; }
            set { transportField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.4927")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(Namespace = "http://www.dis.unina.it/logbus-ng/wsdl")]
    public class ChannelInformation
    {
        private string idField;

        private string titleField;

        private string descriptionField;

        private long coalescenceWindowField;

        private string clientsField;

        private FilterBase filterField;

        /// <remarks/>
        public string id
        {
            get { return idField; }
            set { idField = value; }
        }

        /// <remarks/>
        public string title
        {
            get { return titleField; }
            set { titleField = value; }
        }

        /// <remarks/>
        [XmlElement(IsNullable = true)]
        public string description
        {
            get { return descriptionField; }
            set { descriptionField = value; }
        }

        /// <remarks/>
        public long coalescenceWindow
        {
            get { return coalescenceWindowField; }
            set { coalescenceWindowField = value; }
        }

        /// <remarks/>
        [XmlElement(DataType = "positiveInteger")]
        public string clients
        {
            get { return clientsField; }
            set { clientsField = value; }
        }

        /// <remarks/>
        [XmlElement(Namespace = "http://www.dis.unina.it/logbus-ng/filters")]
        public FilterBase filter
        {
            get { return filterField; }
            set { filterField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.4927")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(Namespace = "http://www.dis.unina.it/logbus-ng/filters")]
    public class FilterParameter
    {
        private object valueField;

        private string nameField;

        /// <remarks/>
        [XmlElement(Form = XmlSchemaForm.Unqualified, IsNullable = true)]
        public object value
        {
            get { return valueField; }
            set { valueField = value; }
        }

        /// <remarks/>
        [XmlAttribute]
        public string name
        {
            get { return nameField; }
            set { nameField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    public delegate void ListChannelsCompletedEventHandler(object sender, ListChannelsCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    public class ListChannelsCompletedEventArgs : AsyncCompletedEventArgs
    {
        private object[] results;

        internal ListChannelsCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string[] Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((string[]) (results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    public delegate void CreateChannelCompletedEventHandler(object sender, AsyncCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetChannelInformationCompletedEventHandler(
        object sender, GetChannelInformationCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    public class GetChannelInformationCompletedEventArgs : AsyncCompletedEventArgs
    {
        private object[] results;

        internal GetChannelInformationCompletedEventArgs(object[] results, Exception exception, bool cancelled,
                                                         object userState) :
                                                             base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ChannelInformation Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((ChannelInformation) (results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    public delegate void DeleteChannelCompletedEventHandler(object sender, AsyncCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetAvailableTransportsCompletedEventHandler(
        object sender, GetAvailableTransportsCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    public class GetAvailableTransportsCompletedEventArgs : AsyncCompletedEventArgs
    {
        private object[] results;

        internal GetAvailableTransportsCompletedEventArgs(object[] results, Exception exception, bool cancelled,
                                                          object userState) :
                                                              base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string[] Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((string[]) (results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    public delegate void SubscribeChannelCompletedEventHandler(object sender, SubscribeChannelCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    public class SubscribeChannelCompletedEventArgs : AsyncCompletedEventArgs
    {
        private object[] results;

        internal SubscribeChannelCompletedEventArgs(object[] results, Exception exception, bool cancelled,
                                                    object userState) :
                                                        base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ChannelSubscriptionResponse Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((ChannelSubscriptionResponse) (results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    public delegate void UnsubscribeChannelCompletedEventHandler(object sender, AsyncCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    public delegate void RefreshSubscriptionCompletedEventHandler(object sender, AsyncCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetAvailableFiltersCompletedEventHandler(object sender, GetAvailableFiltersCompletedEventArgs e
        );

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    public class GetAvailableFiltersCompletedEventArgs : AsyncCompletedEventArgs
    {
        private object[] results;

        internal GetAvailableFiltersCompletedEventArgs(object[] results, Exception exception, bool cancelled,
                                                       object userState) :
                                                           base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string[] Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((string[]) (results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    public delegate void DescribeFilterCompletedEventHandler(object sender, DescribeFilterCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    public class DescribeFilterCompletedEventArgs : AsyncCompletedEventArgs
    {
        private object[] results;

        internal DescribeFilterCompletedEventArgs(object[] results, Exception exception, bool cancelled,
                                                  object userState) :
                                                      base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public FilterDescription Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((FilterDescription) (results[0]));
            }
        }
    }
}

#pragma warning restore 1591
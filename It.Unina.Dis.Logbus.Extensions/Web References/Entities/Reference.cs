//------------------------------------------------------------------------------
// <auto-generated>
//     Il codice è stato generato da uno strumento.
//     Versione runtime:2.0.50727.4952
//
//     Le modifiche apportate a questo file possono provocare un comportamento non corretto e andranno perse se
//     il codice viene rigenerato.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// Il codice sorgente è stato generato automaticamente da Microsoft.VSDesigner, versione 2.0.50727.4952.
// 
using System;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Diagnostics;
using System.Threading;
using System.Web.Services;
using System.Web.Services.Description;
using System.Web.Services.Protocols;
using System.Xml.Schema;
using System.Xml.Serialization;

#pragma warning disable 1591

namespace It.Unina.Dis.Logbus.Entities
{
    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
#if !MONO
    [WebServiceBinding(Name = "EntityManagement", Namespace = "http://www.dis.unina.it/logbus-ng/em")]
#endif
    [XmlInclude(typeof (LoggingEntityIdentifier))]
    public class EntityManagement : SoapHttpClientProtocol, IEntityManagement
    {
        private SendOrPostCallback GetLoggingEntitiesOperationCompleted;

        private SendOrPostCallback FindLoggingEntitiesOperationCompleted;

        private bool useDefaultCredentialsSetExplicitly;

        /// <remarks/>
        public EntityManagement()
        {
            if (IsLocalFileSystemWebService(Url))
            {
                UseDefaultCredentials = true;
                useDefaultCredentialsSetExplicitly = false;
            }
            else
            {
                useDefaultCredentialsSetExplicitly = true;
            }
        }

        public new string Url
        {
            get { return base.Url; }
            set
            {
                if (((IsLocalFileSystemWebService(base.Url)
                      && (useDefaultCredentialsSetExplicitly == false))
                     && (IsLocalFileSystemWebService(value) == false)))
                {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }

        public new bool UseDefaultCredentials
        {
            get { return base.UseDefaultCredentials; }
            set
            {
                base.UseDefaultCredentials = value;
                useDefaultCredentialsSetExplicitly = true;
            }
        }

        /// <remarks/>
        public event GetLoggingEntitiesCompletedEventHandler GetLoggingEntitiesCompleted;

        /// <remarks/>
        public event FindLoggingEntitiesCompletedEventHandler FindLoggingEntitiesCompleted;

        /// <remarks/>
        [SoapDocumentMethod("urn:#GetLoggingEntities", Use = SoapBindingUse.Literal,
            ParameterStyle = SoapParameterStyle.Bare)]
        [return: XmlArray("entities", Namespace = "http://www.dis.unina.it/logbus-ng/em")]
        [return: XmlArrayItem("entity", IsNullable = false)]
        public LoggingEntity[] GetLoggingEntities()
        {
            object[] results = Invoke("GetLoggingEntities", new object[0]);
            return ((LoggingEntity[]) (results[0]));
        }

        /// <remarks/>
        public void GetLoggingEntitiesAsync()
        {
            GetLoggingEntitiesAsync(null);
        }

        /// <remarks/>
        public void GetLoggingEntitiesAsync(object userState)
        {
            if ((GetLoggingEntitiesOperationCompleted == null))
            {
                GetLoggingEntitiesOperationCompleted = new SendOrPostCallback(OnGetLoggingEntitiesOperationCompleted);
            }
            InvokeAsync("GetLoggingEntities", new object[0], GetLoggingEntitiesOperationCompleted, userState);
        }

        private void OnGetLoggingEntitiesOperationCompleted(object arg)
        {
            if ((GetLoggingEntitiesCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs) (arg));
                GetLoggingEntitiesCompleted(this,
                                            new GetLoggingEntitiesCompletedEventArgs(invokeArgs.Results,
                                                                                     invokeArgs.Error,
                                                                                     invokeArgs.Cancelled,
                                                                                     invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [SoapDocumentMethod("urn:#FindLoggingEntities", Use = SoapBindingUse.Literal,
            ParameterStyle = SoapParameterStyle.Bare)]
        [return: XmlArray("entities", Namespace = "http://www.dis.unina.it/logbus-ng/em")]
        [return: XmlArrayItem("entity", IsNullable = false)]
        public LoggingEntity[] FindLoggingEntities(
            [XmlElement(Namespace = "http://www.dis.unina.it/logbus-ng/em")] TemplateQuery query)
        {
            object[] results = Invoke("FindLoggingEntities", new object[]
                                                                 {
                                                                     query
                                                                 });
            return ((LoggingEntity[]) (results[0]));
        }

        /// <remarks/>
        public void FindLoggingEntitiesAsync(TemplateQuery query)
        {
            FindLoggingEntitiesAsync(query, null);
        }

        /// <remarks/>
        public void FindLoggingEntitiesAsync(TemplateQuery query, object userState)
        {
            if ((FindLoggingEntitiesOperationCompleted == null))
            {
                FindLoggingEntitiesOperationCompleted = new SendOrPostCallback(OnFindLoggingEntitiesOperationCompleted);
            }
            InvokeAsync("FindLoggingEntities", new object[]
                                                   {
                                                       query
                                                   }, FindLoggingEntitiesOperationCompleted, userState);
        }

        private void OnFindLoggingEntitiesOperationCompleted(object arg)
        {
            if ((FindLoggingEntitiesCompleted != null))
            {
                InvokeCompletedEventArgs invokeArgs = ((InvokeCompletedEventArgs) (arg));
                FindLoggingEntitiesCompleted(this,
                                             new FindLoggingEntitiesCompletedEventArgs(invokeArgs.Results,
                                                                                       invokeArgs.Error,
                                                                                       invokeArgs.Cancelled,
                                                                                       invokeArgs.UserState));
            }
        }

        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }

        private bool IsLocalFileSystemWebService(string url)
        {
            if (((url == null)
                 || (url == string.Empty)))
            {
                return false;
            }
            Uri wsUri = new Uri(url);
            if (((wsUri.Port >= 1024)
                 && (string.Compare(wsUri.Host, "localHost", StringComparison.OrdinalIgnoreCase) == 0)))
            {
                return true;
            }
            return false;
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.4927")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(Namespace = "http://www.dis.unina.it/logbus-ng/em")]
    public class LoggingEntity : LoggingEntityIdentifier
    {
        private string appNameField;

        private bool ffdaField;

        private DateTime lastActionField;

        private DateTime lastHeartbeatField;

        private bool lastHeartbeatFieldSpecified;

        private string channelIdField;

        private string ffdaChannelIdField;

        public LoggingEntity()
        {
            ffdaField = false;
        }

        /// <remarks/>
        [XmlElement(Form = XmlSchemaForm.Unqualified, IsNullable = true)]
        public string appName
        {
            get { return appNameField; }
            set { appNameField = value; }
        }

        /// <remarks/>
        [XmlElement(Form = XmlSchemaForm.Unqualified)]
        public bool ffda
        {
            get { return ffdaField; }
            set { ffdaField = value; }
        }

        /// <remarks/>
        [XmlElement(Form = XmlSchemaForm.Unqualified)]
        public DateTime lastAction
        {
            get { return lastActionField; }
            set { lastActionField = value; }
        }

        /// <remarks/>
        [XmlElement(Form = XmlSchemaForm.Unqualified)]
        public DateTime lastHeartbeat
        {
            get { return lastHeartbeatField; }
            set { lastHeartbeatField = value; }
        }

        /// <remarks/>
        [XmlIgnore]
        public bool lastHeartbeatSpecified
        {
            get { return lastHeartbeatFieldSpecified; }
            set { lastHeartbeatFieldSpecified = value; }
        }

        /// <remarks/>
        [XmlElement(Form = XmlSchemaForm.Unqualified)]
        public string channelId
        {
            get { return channelIdField; }
            set { channelIdField = value; }
        }

        /// <remarks/>
        [XmlElement(Form = XmlSchemaForm.Unqualified)]
        public string ffdaChannelId
        {
            get { return ffdaChannelIdField; }
            set { ffdaChannelIdField = value; }
        }
    }

    /// <remarks/>
    [XmlInclude(typeof (LoggingEntity))]
    [XmlInclude(typeof (TemplateQuery))]
    [GeneratedCode("System.Xml", "2.0.50727.4927")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(Namespace = "http://www.dis.unina.it/logbus-ng/em")]
    public class LoggingEntityIdentifier
    {
        private string hostField;

        private string processField;

        private string loggerField;

        /// <remarks/>
        [XmlElement(Form = XmlSchemaForm.Unqualified, IsNullable = true)]
        public string host
        {
            get { return hostField; }
            set { hostField = value; }
        }

        /// <remarks/>
        [XmlElement(Form = XmlSchemaForm.Unqualified, IsNullable = true)]
        public string process
        {
            get { return processField; }
            set { processField = value; }
        }

        /// <remarks/>
        [XmlElement(Form = XmlSchemaForm.Unqualified, IsNullable = true)]
        public string logger
        {
            get { return loggerField; }
            set { loggerField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Xml", "2.0.50727.4927")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(Namespace = "http://www.dis.unina.it/logbus-ng/em")]
    public class TemplateQuery : LoggingEntityIdentifier
    {
        private bool ffdaField;

        private bool ffdaFieldSpecified;

        private string maxinactivityField;

        private string appNameField;

        /// <remarks/>
        [XmlElement(Form = XmlSchemaForm.Unqualified)]
        public bool ffda
        {
            get { return ffdaField; }
            set { ffdaField = value; }
        }

        /// <remarks/>
        [XmlIgnore]
        public bool ffdaSpecified
        {
            get { return ffdaFieldSpecified; }
            set { ffdaFieldSpecified = value; }
        }

        /// <remarks/>
        [XmlElement("max-inactivity", Form = XmlSchemaForm.Unqualified, DataType = "integer", IsNullable = true)]
        public string maxinactivity
        {
            get { return maxinactivityField; }
            set { maxinactivityField = value; }
        }

        /// <remarks/>
        [XmlElement(Form = XmlSchemaForm.Unqualified)]
        public string appName
        {
            get { return appNameField; }
            set { appNameField = value; }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetLoggingEntitiesCompletedEventHandler(object sender, GetLoggingEntitiesCompletedEventArgs e);

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    public class GetLoggingEntitiesCompletedEventArgs : AsyncCompletedEventArgs
    {
        private object[] results;

        internal GetLoggingEntitiesCompletedEventArgs(object[] results, Exception exception, bool cancelled,
                                                      object userState) :
                                                          base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public LoggingEntity[] Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((LoggingEntity[]) (results[0]));
            }
        }
    }

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    public delegate void FindLoggingEntitiesCompletedEventHandler(object sender, FindLoggingEntitiesCompletedEventArgs e
        );

    /// <remarks/>
    [GeneratedCode("System.Web.Services", "2.0.50727.4927")]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    public class FindLoggingEntitiesCompletedEventArgs : AsyncCompletedEventArgs
    {
        private object[] results;

        internal FindLoggingEntitiesCompletedEventArgs(object[] results, Exception exception, bool cancelled,
                                                       object userState) :
                                                           base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public LoggingEntity[] Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((LoggingEntity[]) (results[0]));
            }
        }
    }
}

#pragma warning restore 1591